spring:
  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BINDER}
          auto-create-topics: true
          required-acks: ${KAFKA_REQUIRED_ACK_MODE}
      bindings:
        result-out-0:
          destination: ${KAFKA_RESULT_TOPIC}
          contentType: application/json  # JSON 형식으로 처리
        check-in-0:
          destination: ${KAFKA_CHECK_TOPIC}
          contentType: application/json  # JSON 형식으로 처리
          group: ${KAFKA_CONSUME_GROUP}
          consumer:
            max-attempts: ${KAFKA_CONSUME_MAX_ATTEMPTS}
        issued-in-0:
          destination: ${KAFKA_ISSUED_TOPIC}
          contentType: application/json  # JSON 형식으로 처리
          group: ${KAFKA_CONSUME_GROUP}
          consumer:
            max-attempts: ${KAFKA_CONSUME_MAX_ATTEMPTS}
    function:
      definition: check;result;issued
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true


server:
  port: 8081

management:
  tracing:
    sampling:
      probability: 1.0
    zipkin:
      endpoint: http://localhost:9411/api/v2/spans
  metrics:
    enable:
      tomcat: true
  endpoints:
    web:
      exposure:
        include: "*"  # 모든 엔드포인트 노출
